package com.assignment.shoppingcart.microservices.inventoryservice.controller;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;
import org.springframework.web.client.RestTemplate;

import com.assignment.shoppingcart.microservices.inventoryservice.exception.InventoryNotFoundforProduct;
import com.assignment.shoppingcart.microservices.inventoryservice.model.Inventory;
import com.assignment.shoppingcart.microservices.inventoryservice.model.dtos.InventoryDTO;
import com.assignment.shoppingcart.microservices.inventoryservice.model.dtos.ProductDTO;
import com.assignment.shoppingcart.microservices.inventoryservice.proxy.ProductServiceProxy;
import com.assignment.shoppingcart.microservices.inventoryservice.repository.ShoppingCartRepository;

@RestController
@RequestMapping("inventory")
public class InventoryServiceController {

	private Logger LOGGER = LoggerFactory.getLogger(this.getClass());
	
	@Autowired
	private RestTemplate restTemplate;
	
	@Autowired(required = true)
	private ShoppingCartRepository shoppingCartRepository;

	@GetMapping("/{productId}")
	public InventoryDTO getInventoryById(@PathVariable("productId") Long productId) {
		Optional<Inventory> inventory = shoppingCartRepository.findById(productId);
		LOGGER.info("{}", inventory);
		if (!inventory.isPresent()) {
			throw new InventoryNotFoundforProduct("Product id -> "+productId);
		}
		InventoryDTO dto = new InventoryDTO();
		Inventory inventoryObj = inventory.get();
		dto.setId(inventoryObj.getId());
		dto.setPrice(inventoryObj.getPrice());
		dto.setQuantity(inventoryObj.getQuantity());
		ResponseEntity<ProductDTO> productDTO = restTemplate.getForEntity("http://localhost:8082/product/{id}", ProductDTO.class, inventoryObj.getId());
		dto.setProductId(productDTO.getBody());
		return dto;
	}
	
	
	@GetMapping
	public List<Inventory> getInventories() {
		List<Inventory> inventories = shoppingCartRepository.findAll();
		LOGGER.info("{}", inventories);
		
		if (inventories.isEmpty()) {
			throw new InventoryNotFoundforProduct("Inventory not found");
		}
		List<InventoryDTO> inventoryList = new ArrayList<>();
		for (Inventory inv : inventories) {
			InventoryDTO dto = new InventoryDTO();
			dto.setId(inv.getId());
			dto.setQuantity(inv.getQuantity());
			dto.setPrice(inv.getPrice());
			ResponseEntity<ProductDTO> productDTO = restTemplate.getForEntity("http://localhost:8082/product/{id}", ProductDTO.class, inventoryObj.getId());
			dto.setProductId(product);
			inventoryList.add(dto);
		}
		return inventories;
	}
	
	
	
}
